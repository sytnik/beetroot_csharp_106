@inject IShopService ShopService
@page "/"
@using ShopLibrary
@using ShopLibrary.Dto
@inject IDialogService DialogService
@inject ISnackbar Snackbar
<PageTitle>Index</PageTitle>
<style>
    .someClass {
        font: italic bold 0.8em/1.2 Arial, sans-serif;
    }
</style>

<p class="testClass">Some text!</p>
<MudText Typo="Typo.h3" GutterBottom="true">Hello, world!</MudText>

@foreach (var customer in _customers)
{
    <MudCard Class="mb-4 pa-5">
        <MudText Typo="Typo.h5" Color="Color.Dark">ID: @customer.Id, Name: @customer.Name</MudText>
        <MudText Typo="Typo.body2" Color="Color.Dark">@customer.Address</MudText>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary"
                   OnClick="() => OpenDialog(customer.Id)">
            Edit
        </MudButton>
    </MudCard>
}

<MudText Class="mb-8">Welcome to your new app, powered by MudBlazor!</MudText>
<MudAlert Severity="Severity.Normal">
    You can find documentation and examples on our website here:
    <MudLink Href="https://mudblazor.com" Typo="Typo.body2" Color="Color.Inherit">
        <b>www.mudblazor.com</b>
    </MudLink>
</MudAlert>

@code
{
    CustomerDto[] _customers = {};

    protected override async Task OnInitializedAsync() =>
        _customers = await ShopService.GetCustomers();

    private async Task OpenDialog(int id)
    {
        var options = new DialogOptions {ClassBackground = "my-custom-class"};
        var result = await DialogService.Show<ManageCustomerDialog>(
            $"Change customer ID: {id}"
            , new DialogParameters {{"Id", id}},
            options).Result;
        if (result != DialogResult.Cancel())
        {
            _customers = await ShopService.GetCustomers();
            Snackbar.Add($"Customer {id} updated", Severity.Success);
        }
    }
}